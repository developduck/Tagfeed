apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'de.mannodermaus.android-junit5'

android {
    compileSdkVersion rootProject.compile_sdk_version.toInteger()
    buildToolsVersion rootProject.build_tools_version
    flavorDimensions "tagfeed"

    defaultConfig {
        applicationId "kr.co.treegames.tagfeed"
        minSdkVersion rootProject.min_sdk_version.toInteger()
        targetSdkVersion rootProject.target_sdk_version.toInteger()
        versionCode 1
        versionName "0.0.03"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            storeFile file(properties.getProperty('storeFile'))
            storePassword properties.getProperty('storePassword')
            keyAlias properties.getProperty('keyAlias')
            keyPassword properties.getProperty('keyPassword')
        }
    }
    buildTypes {
        debug {
            debuggable true

            buildConfigField "boolean", "CRASHLYTIS", "true"
            buildConfigField "boolean", "ANALYTICS", "true"
            buildConfigField "boolean", "PERFORMANCE", "true"
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            zipAlignEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField "boolean", "CRASHLYTIS", "true"
            buildConfigField "boolean", "ANALYTICS", "false"
            buildConfigField "boolean", "PERFORMANCE", "true"
        }
    }
    productFlavors {
        //Flavors
        tagfeed {
            dimension "tagfeed"
            manifestPlaceholders = [ appLabel: "@string/app_title" ]
        }
        beta {
            dimension "tagfeed"
            applicationIdSuffix ".beta"
            manifestPlaceholders = [ appLabel: "@string/app_title" ]
        }
    }
    android.variantFilter { variant ->
        if((variant.buildType.name == 'release' && variant.getFlavors().get(0).name == 'beta')) {
            variant.setIgnore(true)
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${variant.productFlavors[0].name}-${variant.versionName}-" +
                    "${variant.versionCode}-${variant.variantData.variantConfiguration.buildType.name}.apk"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
androidExtensions {
    experimental = true
}
dependencies {
    //Local
    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    implementation project(':core')
    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //Test
    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.4.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.4.2"
    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.4.2"
    // (Optional) If you also have JUnit 4-based tests
    testImplementation "junit:junit:4.12"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.4.2"

    testImplementation "org.mockito:mockito-core:2.23.0"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0"
    implementation "com.android.support.test.espresso:espresso-idling-resource:3.0.2"
    androidTestImplementation "org.mockito:mockito-android:2.8.47"
    androidTestImplementation 'com.android.support.test:runner:1.1.0'
    androidTestImplementation "com.android.support.test.espresso:espresso-core:3.0.2"
    //Support
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta2'
    implementation "androidx.lifecycle:lifecycle-extensions:2.0.0"
    implementation "com.google.android.material:material:1.0.0"
    implementation 'com.google.android:flexbox:1.1.0'
    kapt "androidx.lifecycle:lifecycle-compiler:2.0.0"
    //Google
    implementation 'com.google.android.gms:play-services-auth:17.0.0'
    implementation 'com.google.firebase:firebase-core:17.1.0'
    implementation 'com.google.firebase:firebase-perf:19.0.0'
    implementation 'com.google.firebase:firebase-messaging:20.0.0'
    implementation 'com.google.firebase:firebase-config:19.0.0'
    implementation 'com.google.firebase:firebase-auth:19.0.0'
    implementation 'com.google.firebase:firebase-ml-vision:23.0.0'
    implementation 'com.google.firebase:firebase-firestore:21.0.0'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    //Animation
    implementation 'com.airbnb.android:lottie:3.0.7'
    //ReactiveX
    implementation 'io.reactivex.rxjava2:rxjava:2.2.10'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.4.0-beta.1'
    implementation 'com.jakewharton.rxbinding3:rxbinding:3.0.0-alpha2'
    //Network and JSON
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
    //Database
    implementation "androidx.room:room-runtime:2.1.0"
    implementation "androidx.room:room-rxjava2:2.1.0"
    kapt "androidx.room:room-compiler:2.1.0"
    //Dependency Injection
    implementation "org.koin:koin-android:2.0.1"
    implementation "org.koin:koin-java:2.0.0-beta-1"
    testImplementation "org.koin:koin-test:2.0.1"
}

apply plugin: 'com.google.gms.google-services'